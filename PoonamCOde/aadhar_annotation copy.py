# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'aadhar_annotation.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PIL.ImageQt import ImageQt
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QWidget ,QFileDialog, QLabel
from PyQt5.uic import loadUi
import os

class Ui_MainWindow(QtWidgets.QMainWindow):
    
    def __init__(self) :
        QtWidgets.QMainWindow.__init__(self)
        loadUi('aadhar_annotation.ui', self)

        
        self.comboBox.addItem("Photo")
        self.comboBox.addItem("QR Code")
        self.comboBox.addItem("Aadhar No")

        
        self.OpenDirButton.clicked.connect(self.chooseDir)
        self.SaveButton.clicked.connect(self.Save_file)
        self.NextImageButton.clicked.connect(self.Next_image)
        self.PrevImageButton.clicked.connect(self.Previous_image)
        self.PrevImageButton.setEnabled(False)

        # self.ZoomInButton = QPushButton('Zoom IN', self)
        self.ZooInButton.clicked.connect(self.on_zoom_in)
        # self.layout.addWidget(self.ZooInButton)

        # self.button_zoom_out = QPushButton('Zoom OUT', self) 
        self.ZoomOutButton.clicked.connect(self.on_zoom_out)
        # self.layout.addWidget(self.ZoomOutButton)

        self.path_folder = ""
        self.save_path_folder =""
        self.current_image=0
        self.file_list=[]
        self.scale = 1
        self.show()
        


    def chooseDir(self):
        qWid = QWidget()
        print("file browse")
        self.path_folder = QFileDialog.getExistingDirectory(qWid, 'Select directory of images', '')  
        for file1 in os.listdir(self.path_folder):
            file_ext= file1.split('.')[1]
            if file_ext.lower() in ['jpeg','png','gif','jpg']:
                file_path=os.path.join(self.path_folder,file1)
                self.file_list.append(file_path)
        self.displayImagesFromDir(0)


    def displayImagesFromDir(self,index):
            imgPil = Image.open(self.file_list[index])
            im = ImageQt(imgPil).copy()
            self.pixmap = QtGui.QPixmap.fromImage(im)
            self.image_label.setPixmap(self.pixmap)
            # self.pixmap= QPixmap(pixmap)
            
                

    def change_output_dir(self):
        qWid = QWidget()
        self.path_folder_output= QFileDialog.getExistingDirectory(qWid, 'Change Output Dir', '')

    def Next_image(self):
        self.current_image+=1
        if self.current_image == (len(self.file_list))-1:
            self.NextImageButton.setEnabled(False)
        self.displayImagesFromDir(self.current_image)
        if self.current_image > 0:
            self.PrevImageButton.setEnabled(True)


    def Previous_image(self):
            
        self.current_image-=1
        if self.current_image == 0:
            self.PrevImageButton.setEnabled(False)
        if self.current_image < len(self.file_list):
            self.NextImageButton.setEnabled(True)
        
        self.displayImagesFromDir(self.current_image) 

    
    def on_zoom_in(self, event):
        self.scale *= 1.05
        self.resize_image()

    def on_zoom_out(self, event):
        self.scale /= 1.05
        self.resize_image()

    def resize_image(self):
        size = self.pixmap.size()
        width = size.width()
        newWidth = width * self.scale
        self.scaled_pixmap = self.pixmap.scaledToWidth(newWidth)
        self.image_label.setPixmap(self.scaled_pixmap)
        self.show()

    


        

        

               
    def Save_file(self):
        qWid = QWidget()
        self.save_path_folder= QFileDialog.getSaveFileName(qWid, 'save file path', '')
        file = open(self.save_path_folder, 'w')
        text = self.textEdit.toPlainText()
        file.write(text)
        file.close()

    
    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)
    ui.show()
    sys.exit(app.exec_())
